// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "foreignKeys"
}

model Utilisateur {
  id              Int         @id @default(autoincrement())
  email           String      @unique
  mot_de_passe    String
  role            Role        @default(CLIENT)
  nom             String
  prenom          String
  telephone       String?
  created_at      DateTime    @default(now())
  client          Client?
  technicien      Technicien?
  messages        Message[]

  @@map("utilisateur")
}

model Client {
  id              Int         @id @default(autoincrement())
  utilisateur     Utilisateur @relation(fields: [utilisateur_id], references: [id])
  utilisateur_id  Int         @unique
  adresse         String?
  scooters        Scooter[]
  reparations     Reparation[]

  @@map("client")
}

model Technicien {
  id              Int         @id @default(autoincrement())
  utilisateur     Utilisateur @relation(fields: [utilisateur_id], references: [id])
  utilisateur_id  Int         @unique
  specialite      String?
  disponibilite   Boolean     @default(true)
  reparations     TechnicienReparation[]

  @@map("technicien")
}

model Scooter {
  id              Int         @id @default(autoincrement())
  client          Client      @relation(fields: [client_id], references: [id])
  client_id       Int
  modele          String
  marque          String
  annee           Int?
  numero_serie    String?     @unique
  reparations     Reparation[]

  @@map("scooter")
}

model Reparation {
  id                  Int         @id @default(autoincrement())
  client              Client      @relation(fields: [client_id], references: [id])
  client_id           Int
  scooter             Scooter     @relation(fields: [scooter_id], references: [id])
  scooter_id          Int
  description_probleme String?
  diagnostic_ia       String?
  estimation_prix     Float?
  statut              ReparationStatut @default(A_VENIR)
  date_creation       DateTime    @default(now())
  date_rdv            DateTime?
  techniciens         TechnicienReparation[]
  messages            Message[]

  @@map("reparation")
}

model TechnicienReparation {
  technicien      Technicien @relation(fields: [technicien_id], references: [id])
  technicien_id   Int
  reparation      Reparation @relation(fields: [reparation_id], references: [id])
  reparation_id   Int

  @@id([technicien_id, reparation_id])
  @@map("technicien_reparation")
}

model Message {
  id              Int         @id @default(autoincrement())
  reparation      Reparation  @relation(fields: [reparation_id], references: [id])
  reparation_id   Int
  expediteur      Utilisateur @relation(fields: [expediteur_id], references: [id])
  expediteur_id   Int
  contenu         String
  date            DateTime    @default(now())

  @@map("message")
}

enum Role {
  ADMIN
  TECHNICIEN
  CLIENT
}

enum ReparationStatut {
  A_VENIR
  EN_COURS
  TERMINE
}
